#!/usr/bin/env python3
"""
HCMC AI Data Comprehensive Validator - Ki·ªÉm tra ƒëa th∆∞ m·ª•c
Ki·ªÉm tra m·ªëi quan h·ªá gi·ªØa video v√† c√°c file t∆∞∆°ng ·ª©ng trong t·∫•t c·∫£ c√°c th∆∞ m·ª•c
"""

import os
import json
import re
from pathlib import Path
from collections import defaultdict
from datetime import datetime

class ComprehensiveValidator:
    def __init__(self, data_path):
        self.data_path = Path(data_path)
        self.results = {
            'validation_time': datetime.now().isoformat(),
            'data_path': str(self.data_path),
            'file_counts': {},
            'video_mapping': {},
            'missing_files': {},
            'duplicate_files': {},
            'empty_files': {},
            'cross_directory_issues': [],
            'structure_issues': [],
            'level_distribution': {},
            'summary': {}
        }
        
        # Define the expected directory structure and file patterns
        self.directories = {
            'videos': ('video', '*.mp4'),
            'keyframes': ('keyframes', '*.jpg'),
            'features': ('clip-features-32', '*.npy'),
            'maps': ('map-keyframes', '*.csv'),
            'media_info': ('media-info', '*.json'),
            'objects': ('objects', '*.json')
        }
    
    def scan_directory(self, dir_name, file_pattern="*"):
        """Qu√©t th∆∞ m·ª•c ƒë·ªÉ t√¨m c√°c file kh·ªõp v·ªõi m·∫´u"""
        dir_path = self.data_path / dir_name
        if not dir_path.exists():
            self.results['structure_issues'].append(f"Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c: {dir_path}")
            return []
        
        files = []
        try:
            if dir_name in ["keyframes", "objects"]:
                # These are directories with subdirectories
                for subdir in dir_path.iterdir():
                    if subdir.is_dir():
                        for file_path in subdir.rglob(file_pattern):
                            if file_path.is_file():
                                files.append(file_path)
            else:
                # Flat directories
                for file_path in dir_path.rglob(file_pattern):
                    if file_path.is_file():
                        files.append(file_path)
        except Exception as e:
            self.results['structure_issues'].append(f"L·ªói khi qu√©t {dir_name}: {e}")
        
        return files
    
    def extract_video_name(self, file_path):
        """Tr√≠ch xu·∫•t t√™n video t·ª´ ƒë∆∞·ªùng d·∫´n file"""
        filename = file_path.stem  # Remove extension
        
        # X·ª≠ l√Ω c√°c m·∫´u ƒë·∫∑t t√™n file kh√°c nhau
        if filename.startswith('L') and '_V' in filename:
            # T√™n video tr·ª±c ti·∫øp (L21_V001)
            return filename
        elif '_' in filename:
            # File keyframe ho·∫∑c object (L21_V001_001)
            parts = filename.split('_')
            if len(parts) >= 2:
                return f"{parts[0]}_{parts[1]}"
        
        # ƒê·ªëi v·ªõi keyframes v√† objects c√≥ t√™n s·ªë (001.jpg, 002.json)
        # Tr√≠ch xu·∫•t t√™n video t·ª´ th∆∞ m·ª•c cha
        parent_dir = file_path.parent.name
        if parent_dir.startswith('L') and '_V' in parent_dir:
            return parent_dir
        
        return None
    
    def get_video_names_from_files(self, files):
        """Tr√≠ch xu·∫•t t√™n video t·ª´ danh s√°ch file"""
        video_names = set()
        for file_path in files:
            video_name = self.extract_video_name(file_path)
            if video_name:
                video_names.add(video_name)
        return sorted(list(video_names))
    
    def build_video_mapping(self):
        """X√¢y d·ª±ng b·∫£n ƒë·ªì t√™n video ƒë·∫øn c√°c file c·ªßa ch√∫ng tr√™n t·∫•t c·∫£ c√°c th∆∞ m·ª•c"""
        video_mapping = defaultdict(lambda: defaultdict(list))
        
        for dir_type, (dir_name, pattern) in self.directories.items():
            print(f"üìÇ ƒêang qu√©t {dir_name} ƒë·ªÉ l·∫≠p b·∫£n ƒë·ªì video...")
            files = self.scan_directory(dir_name, pattern)
            
            for file_path in files:
                video_name = self.extract_video_name(file_path)
                if video_name:
                    video_mapping[video_name][dir_type].append(str(file_path))
        
        return dict(video_mapping)
    
    def check_cross_directory_consistency(self, video_mapping):
        """Ki·ªÉm tra xem m·ªói video c√≥ file t∆∞∆°ng ·ª©ng trong t·∫•t c·∫£ c√°c th∆∞ m·ª•c kh√¥ng"""
        issues = []
        missing_files = defaultdict(list)
        
        # L·∫•y t·∫•t c·∫£ t√™n video duy nh·∫•t
        all_videos = set(video_mapping.keys())
        
        for video_name in all_videos:
            video_files = video_mapping[video_name]
            
            # Ki·ªÉm tra xem video c√≥ file trong t·∫•t c·∫£ c√°c th∆∞ m·ª•c mong ƒë·ª£i kh√¥ng
            for dir_type in self.directories.keys():
                if dir_type not in video_files or not video_files[dir_type]:
                    missing_files[dir_type].append(video_name)
                    issues.append(f"Thi·∫øu file {dir_type} cho video: {video_name}")
        
        return issues, dict(missing_files)
    
    def check_duplicate_files(self, video_mapping):
        """Ki·ªÉm tra file tr√πng l·∫∑p tr√™n c√°c th∆∞ m·ª•c"""
        duplicate_issues = []
        duplicate_files = defaultdict(list)
        
        # C√°c th∆∞ m·ª•c m√† nhi·ªÅu file cho m·ªói video l√† b√¨nh th∆∞·ªùng
        expected_multiple = {'keyframes', 'objects'}
        
        for video_name, dir_files in video_mapping.items():
            for dir_type, files in dir_files.items():
                if len(files) > 1:
                    if dir_type in expected_multiple:
                        # Nhi·ªÅu keyframes/objects cho m·ªói video l√† b√¨nh th∆∞·ªùng
                        continue
                    else:
                        # Nhi·ªÅu file trong c√°c th∆∞ m·ª•c kh√°c c√≥ th·ªÉ l√† tr√πng l·∫∑p
                        duplicate_files[dir_type].append({
                            'video': video_name,
                            'files': files,
                            'count': len(files)
                        })
                        duplicate_issues.append(f"File {dir_type} tr√πng l·∫∑p cho video: {video_name} ({len(files)} files)")
        
        return duplicate_issues, dict(duplicate_files)
    
    def check_file_sizes(self, video_mapping):
        """Ki·ªÉm tra file r·ªóng ho·∫∑c c√≥ k√≠ch th∆∞·ªõc ƒë√°ng ng·ªù"""
        empty_files = defaultdict(list)
        small_files = defaultdict(list)
        
        for video_name, dir_files in video_mapping.items():
            for dir_type, files in dir_files.items():
                for file_path in files:
                    try:
                        size = Path(file_path).stat().st_size
                        if size == 0:
                            empty_files[dir_type].append({
                                'video': video_name,
                                'file': file_path,
                                'size': size
                            })
                        elif size < 1024:  # Less than 1KB
                            small_files[dir_type].append({
                                'video': video_name,
                                'file': file_path,
                                'size': size
                            })
                    except Exception as e:
                        self.results['structure_issues'].append(f"L·ªói khi ki·ªÉm tra k√≠ch th∆∞·ªõc c·ªßa {file_path}: {e}")
        
        return dict(empty_files), dict(small_files)
    
    def analyze_level_distribution(self, video_names):
        """Ph√¢n t√≠ch ph√¢n b·ªë video theo c√°c c·∫•p ƒë·ªô"""
        level_counts = defaultdict(int)
        level_videos = defaultdict(list)
        
        for video_name in video_names:
            match = re.match(r'L(\d+)_V(\d+)', video_name)
            if match:
                level = match.group(1)
                video_num = int(match.group(2))
                level_counts[level] += 1
                level_videos[level].append(video_num)
        
        # Ki·ªÉm tra kho·∫£ng tr·ªëng
        gaps = {}
        for level, videos in level_videos.items():
            if videos:
                videos.sort()
                expected_videos = set(range(1, max(videos) + 1))
                actual_videos = set(videos)
                missing = expected_videos - actual_videos
                if missing:
                    gaps[level] = sorted(missing)
        
        return dict(level_counts), gaps
    
    def validate_all(self):
        """Ch·∫°y t·∫•t c·∫£ c√°c ki·ªÉm tra x√°c th·ª±c to√†n di·ªán"""
        print("üîç B·∫Øt ƒë·∫ßu Ki·ªÉm tra To√†n di·ªán D·ªØ li·ªáu AI HCMC...")
        print(f"üìÅ ƒê∆∞·ªùng d·∫´n d·ªØ li·ªáu: {self.data_path}")
        print()
        
        # X√¢y d·ª±ng b·∫£n ƒë·ªì video tr√™n t·∫•t c·∫£ c√°c th∆∞ m·ª•c
        print("üó∫Ô∏è ƒêang x√¢y d·ª±ng b·∫£n ƒë·ªì video tr√™n t·∫•t c·∫£ c√°c th∆∞ m·ª•c...")
        video_mapping = self.build_video_mapping()
        self.results['video_mapping'] = video_mapping
        
        # ƒê·∫øm file theo th∆∞ m·ª•c
        for dir_type in self.directories.keys():
            total_files = sum(len(files) for files in video_mapping.values() if dir_type in files)
            self.results['file_counts'][dir_type] = total_files
        
        # Ki·ªÉm tra t√≠nh nh·∫•t qu√°n ƒëa th∆∞ m·ª•c
        print("üîç ƒêang ki·ªÉm tra t√≠nh nh·∫•t qu√°n ƒëa th∆∞ m·ª•c...")
        consistency_issues, missing_files = self.check_cross_directory_consistency(video_mapping)
        self.results['cross_directory_issues'] = consistency_issues
        self.results['missing_files'] = missing_files
        
        # Ki·ªÉm tra file tr√πng l·∫∑p
        print("üîç ƒêang ki·ªÉm tra file tr√πng l·∫∑p...")
        duplicate_issues, duplicate_files = self.check_duplicate_files(video_mapping)
        self.results['duplicate_files'] = duplicate_files
        
        # Ki·ªÉm tra k√≠ch th∆∞·ªõc file
        print("üîç ƒêang ki·ªÉm tra k√≠ch th∆∞·ªõc file...")
        empty_files, small_files = self.check_file_sizes(video_mapping)
        self.results['empty_files'] = empty_files
        
        # Ph√¢n t√≠ch ph√¢n b·ªë c·∫•p ƒë·ªô
        print("üìä ƒêang ph√¢n t√≠ch ph√¢n b·ªë c·∫•p ƒë·ªô...")
        level_counts, gaps = self.analyze_level_distribution(video_mapping.keys())
        self.results['level_distribution'] = {
            'counts': level_counts,
            'gaps': gaps
        }
        
        # T·∫°o b·∫£n t√≥m t·∫Øt
        self.generate_summary()
        
        return self.results
    
    def generate_summary(self):
        """T·∫°o th·ªëng k√™ t√≥m t·∫Øt to√†n di·ªán"""
        total_files = sum(self.results['file_counts'].values())
        total_empty_files = sum(len(files) for files in self.results['empty_files'].values())
        total_duplicate_patterns = sum(len(files) for files in self.results['duplicate_files'].values())
        total_missing_files = sum(len(videos) for videos in self.results['missing_files'].values())
        total_cross_directory_issues = len(self.results['cross_directory_issues'])
        
        self.results['summary'] = {
            'total_files': total_files,
            'total_videos': len(self.results['video_mapping']),
            'total_empty_files': total_empty_files,
            'total_duplicate_patterns': total_duplicate_patterns,
            'total_missing_files': total_missing_files,
            'total_cross_directory_issues': total_cross_directory_issues,
            'structure_issues_count': len(self.results['structure_issues']),
            'overall_status': 'PASS' if (total_empty_files == 0 and 
                                       total_duplicate_patterns == 0 and 
                                       total_missing_files == 0 and 
                                       total_cross_directory_issues == 0) else 'ISSUES_FOUND'
        }
