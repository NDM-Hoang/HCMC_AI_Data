#!/usr/bin/env python3
"""
Tr√¨nh t·∫°o b√°o c√°o ki·ªÉm tra to√†n di·ªán
"""

import json
from pathlib import Path

def print_comprehensive_report(results):
    """In b√°o c√°o ki·ªÉm tra to√†n di·ªán"""
    print("=" * 120)
    print("üìä B√ÅO C√ÅO KI·ªÇM TRA TO√ÄN DI·ªÜN D·ªÆ LI·ªÜU AI HCMC")
    print("=" * 120)
    print()
    
    # Th·ªëng k√™ t√≥m t·∫Øt
    print("üìà TH·ªêNG K√ä T√ìM T·∫ÆT:")
    print(f"   T·ªïng s·ªë file: {results['summary']['total_files']:,}")
    print(f"   T·ªïng s·ªë video: {results['summary']['total_videos']}")
    print(f"   File r·ªóng: {results['summary']['total_empty_files']}")
    print(f"   M·∫´u tr√πng l·∫∑p: {results['summary']['total_duplicate_patterns']}")
    print(f"   File thi·∫øu: {results['summary']['total_missing_files']}")
    print(f"   V·∫•n ƒë·ªÅ ƒëa th∆∞ m·ª•c: {results['summary']['total_cross_directory_issues']}")
    print(f"   V·∫•n ƒë·ªÅ c·∫•u tr√∫c: {results['summary']['structure_issues_count']}")
    print(f"   Tr·∫°ng th√°i t·ªïng th·ªÉ: {results['summary']['overall_status']}")
    print()
    
    # S·ªë l∆∞·ª£ng file theo lo·∫°i
    print("üìÅ S·ªê L∆Ø·ª¢NG FILE THEO LO·∫†I:")
    for dir_type, count in results['file_counts'].items():
        print(f"   {dir_type.replace('_', ' ').title()}: {count:,}")
    print()
    
    # Ki·ªÉm tra t√≠nh nh·∫•t qu√°n ƒëa th∆∞ m·ª•c
    print("üîç KI·ªÇM TRA T√çNH NH·∫§T QU√ÅN ƒêA TH∆Ø M·ª§C:")
    if results['missing_files']:
        total_missing = 0
        for dir_type, videos in results['missing_files'].items():
            if videos:
                print(f"   ‚ùå {dir_type}: {len(videos)} video thi·∫øu file")
                total_missing += len(videos)
        print(f"   ‚ö†Ô∏è  T·ªïng s·ªë file thi·∫øu: {total_missing}")
    else:
        print("   ‚úÖ T·∫•t c·∫£ video ƒë·ªÅu c√≥ file t∆∞∆°ng ·ª©ng trong t·∫•t c·∫£ c√°c th∆∞ m·ª•c")
    print()
    
    # Ki·ªÉm tra file tr√πng l·∫∑p
    print("üîç KI·ªÇM TRA FILE TR√ôNG L·∫∂P:")
    if results['duplicate_files']:
        total_duplicates = 0
        for dir_type, duplicates in results['duplicate_files'].items():
            if duplicates:
                print(f"   ‚ùå {dir_type}: {len(duplicates)} video c√≥ file tr√πng l·∫∑p")
                total_duplicates += len(duplicates)
        print(f"   ‚ö†Ô∏è  T·ªïng s·ªë v·∫•n ƒë·ªÅ tr√πng l·∫∑p: {total_duplicates}")
    else:
        print("   ‚úÖ Kh√¥ng t√¨m th·∫•y file tr√πng l·∫∑p")
    print()
    
    # Ki·ªÉm tra file r·ªóng
    print("üîç KI·ªÇM TRA FILE R·ªñNG:")
    if results['empty_files']:
        total_empty = 0
        for dir_type, empty_list in results['empty_files'].items():
            if empty_list:
                print(f"   ‚ùå {dir_type}: {len(empty_list)} file r·ªóng")
                total_empty += len(empty_list)
        print(f"   ‚ö†Ô∏è  T·ªïng s·ªë file r·ªóng: {total_empty}")
    else:
        print("   ‚úÖ Kh√¥ng t√¨m th·∫•y file r·ªóng")
    print()
    
    # Ph√¢n b·ªë c·∫•p ƒë·ªô
    print("üìä PH√ÇN B·ªê C·∫§P ƒê·ªò:")
    for level in sorted(results['level_distribution']['counts'].keys()):
        count = results['level_distribution']['counts'][level]
        print(f"   L{level}: {count} video")
    
    if results['level_distribution']['gaps']:
        print("\n   ‚ö†Ô∏è  KHO·∫¢NG TR·ªêNG TRONG ƒê√ÅNH S·ªê VIDEO:")
        for level, gaps in results['level_distribution']['gaps'].items():
            print(f"     L{level}: Thi·∫øu video {gaps}")
    print()
    
    # Chi ti·∫øt v·∫•n ƒë·ªÅ ƒëa th∆∞ m·ª•c
    if results['cross_directory_issues']:
        print("‚ö†Ô∏è  V·∫§N ƒê·ªÄ ƒêA TH∆Ø M·ª§C:")
        for issue in results['cross_directory_issues'][:10]:  # Hi·ªÉn th·ªã 10 v·∫•n ƒë·ªÅ ƒë·∫ßu ti√™n
            print(f"   - {issue}")
        if len(results['cross_directory_issues']) > 10:
            print(f"   ... v√† {len(results['cross_directory_issues']) - 10} v·∫•n ƒë·ªÅ kh√°c")
        print()
    
    # V·∫•n ƒë·ªÅ c·∫•u tr√∫c
    if results['structure_issues']:
        print("‚ö†Ô∏è  V·∫§N ƒê·ªÄ C·∫§U TR√öC:")
        for issue in results['structure_issues']:
            print(f"   - {issue}")
        print()
    
    # ƒê√°nh gi√° cu·ªëi c√πng
    print("üéØ ƒê√ÅNH GI√Å CU·ªêI C√ôNG:")
    if results['summary']['overall_status'] == 'PASS':
        print("   ‚úÖ B·ªò D·ªÆ LI·ªÜU HO√ÄN CH·ªàNH V√Ä S·∫¥N S√ÄNG S·ª¨ D·ª§NG!")
        print("   üéâ T·∫•t c·∫£ c√°c ki·ªÉm tra x√°c th·ª±c ƒë√£ th√†nh c√¥ng!")
        print("   ‚úÖ T·∫•t c·∫£ video ƒë·ªÅu c√≥ file t∆∞∆°ng ·ª©ng trong t·∫•t c·∫£ c√°c th∆∞ m·ª•c")
        print("   ‚úÖ Kh√¥ng c√≥ file tr√πng l·∫∑p ho·∫∑c thi·∫øu")
    else:
        print("   ‚ö†Ô∏è  PH√ÅT HI·ªÜN V·∫§N ƒê·ªÄ - C·∫ßn xem x√©t")
        if results['summary']['total_missing_files'] > 0:
            print(f"   ‚ùå {results['summary']['total_missing_files']} file thi·∫øu c·∫ßn ch√∫ √Ω")
        if results['summary']['total_duplicate_patterns'] > 0:
            print(f"   ‚ùå {results['summary']['total_duplicate_patterns']} file tr√πng l·∫∑p c·∫ßn ch√∫ √Ω")
        if results['summary']['total_empty_files'] > 0:
            print(f"   ‚ùå {results['summary']['total_empty_files']} file r·ªóng c·∫ßn ch√∫ √Ω")
    
    print("\n" + "=" * 120)

def save_comprehensive_results(results, output_file="reports/comprehensive_validation_results.json"):
    """L∆∞u k·∫øt qu·∫£ to√†n di·ªán v√†o file JSON"""
    try:
        # ƒê·∫£m b·∫£o th∆∞ m·ª•c reports t·ªìn t·∫°i
        Path(output_file).parent.mkdir(parents=True, exist_ok=True)
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        print(f"üìÑ K·∫øt qu·∫£ to√†n di·ªán ƒë√£ l∆∞u v√†o: {output_file}")
    except Exception as e:
        print(f"‚ö†Ô∏è  L·ªói khi l∆∞u k·∫øt qu·∫£ to√†n di·ªán: {e}")

def generate_missing_files_report(results, output_file="reports/missing_files_report.md"):
    """T·∫°o b√°o c√°o chi ti·∫øt v·ªÅ c√°c file thi·∫øu"""
    try:
        Path(output_file).parent.mkdir(parents=True, exist_ok=True)
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write("# B√°o C√°o File Thi·∫øu - D·ªØ Li·ªáu AI HCMC 2025\n\n")
            f.write(f"ƒê∆∞·ª£c t·∫°o: {results['validation_time']}\n")
            f.write(f"ƒê∆∞·ªùng d·∫´n d·ªØ li·ªáu: {results['data_path']}\n\n")
            
            if results['missing_files']:
                f.write("## T√≥m T·∫Øt File Thi·∫øu\n\n")
                for dir_type, videos in results['missing_files'].items():
                    if videos:
                        f.write(f"### {dir_type.replace('_', ' ').title()}\n")
                        f.write(f"- **Thi·∫øu file cho {len(videos)} video**\n\n")
                        f.write("| Video | Tr·∫°ng th√°i |\n")
                        f.write("|-------|------------|\n")
                        for video in sorted(videos):
                            f.write(f"| {video} | ‚ùå Thi·∫øu |\n")
                        f.write("\n")
            else:
                f.write("## ‚úÖ Kh√¥ng T√¨m Th·∫•y File Thi·∫øu\n\n")
                f.write("T·∫•t c·∫£ video ƒë·ªÅu c√≥ file t∆∞∆°ng ·ª©ng trong t·∫•t c·∫£ c√°c th∆∞ m·ª•c.\n")
        
        print(f"üìÑ B√°o c√°o file thi·∫øu ƒë√£ l∆∞u v√†o: {output_file}")
    except Exception as e:
        print(f"‚ö†Ô∏è  L·ªói khi l∆∞u b√°o c√°o file thi·∫øu: {e}")
